filepath,testclass,testname,assertion_type,line_number,assert_string
sonnet/sonnet/src/base_test.py,AutoReprTest,test_does_not_fail_with_hostile_input,assert_false,225,self.assertFalse(r.equality_checked)
sonnet/sonnet/src/base_test.py,AutoReprTest,test_does_not_fail_with_hostile_input,assert_true,228,self.assertTrue(r.equality_checked)
sonnet/sonnet/src/base_test.py,CustomMetaclassTest,testSupportsCustomMetaclass,assert_true,645,"self.assertTrue(getattr(ModuleWithCustomMetaclass, CombiningMetaclass.TAG))"
sonnet/sonnet/src/base_test.py,CustomMetaclassTest,testSupportsCustomMetaclass,assert_true,646,"self.assertTrue(getattr(ModuleWithCustomMetaclass, CustomMetaclass.TAG))"
sonnet/sonnet/src/recurrent_test.py,VanillaRNNTest,testComputationAgainstNumPy,assert_allclose,54,"self.assertAllClose(outputs, expected_output, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,VanillaRNNTest,testComputationAgainstNumPy,assert_allclose,55,"self.assertAllClose(next_state, expected_output, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,VanillaRNNTest,testInitialization,assert_allclose,77,"self.assertAllClose(self.evaluate(v), self.evaluate(tf.ones_like(v)))"
sonnet/sonnet/src/recurrent_test.py,DeepRNNTest,testComputationAgainstNumPy,assert_allclose,107,"self.assertAllClose(outputs, expected_outputs)"
sonnet/sonnet/src/recurrent_test.py,DeepRNNTest,testComputationAgainstNumPy,assert_allclose,108,"self.assertAllClose(next_state, tuple(expected_next_state))"
sonnet/sonnet/src/recurrent_test.py,DeepRNNTest,testComputationAgainstNumPyWithCallables,assert_allclose,120,"self.assertAllClose(outputs, np.sign(np.tanh(inputs)))"
sonnet/sonnet/src/recurrent_test.py,DeepRNNTest,testInitialState,assert_allclose,128,"self.assertAllClose(prev_state[0], core0.initial_state(self.batch_size))"
sonnet/sonnet/src/recurrent_test.py,DeepRNNTest,testInitialState,assert_allclose,129,"self.assertAllClose(prev_state[1], core1.initial_state(self.batch_size))"
sonnet/sonnet/src/recurrent_test.py,LSTMTest,testComputationAgainstNumPy,assert_allclose,193,"self.assertAllClose(outputs, next_state.hidden, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,LSTMTest,testComputationAgainstNumPy,assert_allclose,194,"self.assertAllClose(expected_hidden, next_state.hidden, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,LSTMTest,testComputationAgainstNumPy,assert_allclose,195,"self.assertAllClose(expected_cell, next_state.cell, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,LSTMTest,testInitialization,assert_allclose,222,"self.assertAllClose(self.evaluate(v), self.evaluate(tf.ones_like(v)))"
sonnet/sonnet/src/recurrent_test.py,LSTMTest,testRecurrentDropout,assert_allclose,242,"self.assertAllClose(train_output, test_output, rtol=rtol)"
sonnet/sonnet/src/recurrent_test.py,LSTMTest,testRecurrentDropout,assert_greater,244,"self.assertGreater(self.evaluate(tf.reduce_max(tf.abs(train_output - test_output))), 0.001)"
sonnet/sonnet/src/recurrent_test.py,UnrolledLSTMTest,unrolled_lstm_fn,assert_allclose,294,"self.assertAllClose(output_sequence, expected_output_sequence, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,UnrolledLSTMTest,unrolled_lstm_fn,assert_allclose,295,"self.assertAllClose(final_state.hidden, expected_final_state.hidden, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,UnrolledLSTMTest,unrolled_lstm_fn,assert_allclose,297,"self.assertAllClose(final_state.cell, expected_final_state.cell, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,UnrolledLSTMTest,testInitialization,assert_allclose,345,"self.assertAllClose(self.evaluate(v), self.evaluate(tf.ones_like(v)))"
sonnet/sonnet/src/recurrent_test.py,ConvNDLSTMTest,conv,assert_allclose,399,"self.assertAllClose(outputs, next_state.hidden, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,ConvNDLSTMTest,conv,assert_allclose,400,"self.assertAllClose(expected_hidden, next_state.hidden, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,ConvNDLSTMTest,conv,assert_allclose,401,"self.assertAllClose(expected_cell, next_state.cell, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,ConvNDLSTMTest,testInitialization,assert_allclose,439,"self.assertAllClose(self.evaluate(v), self.evaluate(tf.ones_like(v)))"
sonnet/sonnet/src/recurrent_test.py,GRUTest,testComputationAgainstNumPy,assert_allclose,470,"self.assertAllClose(outputs, next_state, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,GRUTest,testComputationAgainstNumPy,assert_allclose,471,"self.assertAllClose(self.evaluate(next_state), expected_state, atol=atol)"
sonnet/sonnet/src/recurrent_test.py,GRUTest,testInitialization,assert_allclose,493,"self.assertAllClose(self.evaluate(v), self.evaluate(tf.ones_like(v)))"
sonnet/sonnet/src/recurrent_test.py,CuDNNGRUTest,cudnn_compatible_gru_fn,assert_allclose,547,"self.assertAllClose(outputs, expected_outputs)"
sonnet/sonnet/src/recurrent_test.py,CuDNNGRUTest,cudnn_compatible_gru_fn,assert_allclose,548,"self.assertAllClose(states[-1], expected_final_state)"
sonnet/sonnet/src/recurrent_test.py,CuDNNGRUTest,testInitialization,assert_allclose,570,"self.assertAllClose(self.evaluate(v), self.evaluate(tf.ones_like(v)))"
sonnet/sonnet/src/recurrent_test.py,TrainableStateTest,testMasked,assert_allclose,657,"self.assertAllClose(s, tf.zeros_like(s))"
sonnet/sonnet/src/recurrent_test.py,TrainableStateTest,testForCore,assert_allclose,662,"self.assertAllClose(trainable_state(batch_size=42), core.initial_state(batch_size=42))"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testFlat,assert_allclose,703,"self.assertAllClose(output_sequence, [inputs * (h + t) for t, inputs in enumerate(input_sequence)])"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testFlat,assert_allclose,706,"self.assertAllClose(final_state, (tf.cast(self.num_steps, tf.float32), h))"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testNestedInputs,assert_allclose,720,"self.assertAllClose(output_sequence, [inputs * (h + t) for t, inputs in enumerate(input_sequence)])"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testNestedInputs,assert_allclose,723,"self.assertAllClose(final_state, (tf.cast(self.num_steps, tf.float32), h))"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testNestedOutputs,assert_allclose,739,"self.assertAllClose(output_sequence, (expected_outputs,) * num_replicas)"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testNestedOutputs,assert_allclose,740,"self.assertAllClose(final_state, (tf.cast(self.num_steps, tf.float32), h))"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,assertConsistentWithLength,assert_allclose,816,"self.assertAllClose(output_sequence[t, b], output_sequence[t - 1, b])"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testVariableLengthAllFull,assert_allclose,832,"self.assertAllClose(output_sequence, expected_output_sequence)"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testVariableLengthAllFull,assert_allclose,833,"self.assertAllClose(final_state, expected_final_state)"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testVariableLengthAllEmpty,assert_allclose,846,"self.assertAllClose(output_sequence, tf.zeros_like(output_sequence))"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testVariableLengthAllEmpty,assert_allclose,848,"self.assertAllClose(final_state[0], self.num_steps)"
sonnet/sonnet/src/recurrent_test.py,UnrollTest,testVariableLengthAllEmpty,assert_allclose,849,"self.assertAllClose(final_state[1], initial_state[1])"
sonnet/sonnet/src/deferred_test.py,DeferredTest,test_delattr,assert_true,70,"self.assertTrue(hasattr(mod.target, 'w'))"
sonnet/sonnet/src/deferred_test.py,DeferredTest,test_delattr,assert_false,72,"self.assertFalse(hasattr(mod.target, 'w'))"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testCall,assert_allclose,28,"self.assertAllClose(ema(3.0).numpy(), 3.0)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testCall,assert_allclose,29,"self.assertAllClose(ema(6.0).numpy(), 5.0)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testUpdateAndValue,assert_allclose,34,"self.assertAllClose(ema.value.numpy(), 3.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testUpdateAndValue,assert_allclose,37,"self.assertAllClose(ema.value.numpy(), 5.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testReset,assert_allclose,41,"self.assertAllClose(ema(3.0).numpy(), 3.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testReset,assert_allclose,47,"self.assertAllClose(ema(3.0).numpy(), 3.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testResetVector,assert_allclose,55,"self.assertAllClose(ema.value.numpy(), tf.zeros_like(random_input))"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testValueEqualsLatestUpdate,assert_allclose,61,"self.assertAllClose(ema(3.0).numpy(), 3.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testValueEqualsLatestUpdate,assert_allclose,62,"self.assertAllClose(ema.value.numpy(), 3.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testValueEqualsLatestUpdate,assert_allclose,64,"self.assertAllClose(ema(6.0).numpy(), 5.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testValueEqualsLatestUpdate,assert_allclose,65,"self.assertAllClose(ema.value.numpy(), 5.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testWithTFFunction,assert_allclose,75,"self.assertAllClose(ema_1(x).numpy(), ema_func(x).numpy(), atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testResetWithTFFunction,assert_allclose,82,"self.assertAllClose(ema_func(3.0).numpy(), 3.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/moving_averages_test.py,ExponentialMovingAverageTest,testResetWithTFFunction,assert_allclose,87,"self.assertAllClose(ema_func(3.0).numpy(), 3.0, atol=0.001, rtol=1e-05)"
sonnet/sonnet/src/depthwise_conv_test.py,DepthwiseConvTest,testFunction,assert_allclose,95,"self.assertAllClose(self.evaluate(y1), self.evaluate(y2), atol=0.0001)"
sonnet/sonnet/src/depthwise_conv_test.py,DepthwiseConvTest,testComputationSame,assert_allclose,172,"self.assertAllClose(np.reshape(out.numpy(), [5, 5]), expected_out)"
sonnet/sonnet/src/depthwise_conv_test.py,DepthwiseConvTest,testComputationValid,assert_allclose,190,"self.assertAllClose(np.reshape(out.numpy(), [3, 3]), expected_out)"
sonnet/sonnet/src/depthwise_conv_test.py,DepthwiseConvTest,testComputationValidMultiChannel,assert_allclose,207,"self.assertAllClose(np.reshape(out.numpy(), [3, 3, 3]), expected_out)"
sonnet/sonnet/src/depthwise_conv_test.py,DepthwiseConvTest,testSharing,assert_allclose,223,"self.assertAllClose(conv1(x1), conv1(x2))"
sonnet/sonnet/src/depthwise_conv_test.py,DepthwiseConvTest,testSharing,assert_allclose,231,"self.assertAllClose(conv1(x1), conv1(x2))"
sonnet/sonnet/src/batch_norm_test.py,BaseBatchNormTest,testUsingTestStats,assert_allclose,181,"self.assertAllClose(x, 2.0, rtol=1e-05, atol=0.001)"
sonnet/sonnet/src/linear_test.py,LinearTest,testCallMultiBatch,assert_allclose,106,"self.assertAllClose(tf_output, np_output, atol=0.01, rtol=0.05)"
sonnet/sonnet/src/linear_test.py,LinearTest,testFunction,assert_allclose,123,"self.assertAllClose(self.evaluate(y1), self.evaluate(y2), atol=0.0001)"
sonnet/sonnet/src/leaky_clip_by_value_test.py,LeakyClipByValueTest,test_leaky_clip_by_value_backward,assert_greater_equal,56,"self.assertGreaterEqual(clip_t_value, min_val)"
sonnet/sonnet/src/leaky_clip_by_value_test.py,LeakyClipByValueTest,test_leaky_clip_by_value_backward,assert_less_equal,57,"self.assertLessEqual(clip_t_value, max_val)"
sonnet/sonnet/src/pad_test.py,PadTest,test_same_padding,assert_allclose,76,"self.assertAllClose(y1.numpy(), y2.numpy())"
sonnet/sonnet/src/dropout_test.py,DropoutTest,test_sum_close,assert_allclose,31,"self.assertAllClose(tf.reduce_sum(mod(x, is_training=True)), tf.reduce_sum(mod(x, is_training=False)), rtol=rtol)"
sonnet/sonnet/src/dropout_test.py,DropoutTest,test_dropout_rate,assert_allclose,47,"self.assertAllClose(kept, 1000 * keep_prob, rtol=rtol)"
sonnet/sonnet/src/conv_test.py,ConvTest,padding_func,assert_true,57,"self.assertTrue(getattr(padding_func, 'called', False))"
sonnet/sonnet/src/conv_test.py,ConvTest,testFunction,assert_allclose,150,"self.assertAllClose(self.evaluate(y1), self.evaluate(y2), atol=0.0001)"
sonnet/sonnet/src/conv_test.py,Conv2DTest,testComputationPaddingSame,assert_allclose,244,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_test.py,Conv2DTest,testComputationPaddingValid,assert_allclose,265,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_test.py,Conv1DTest,testComputationPaddingSame,assert_allclose,289,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_test.py,Conv1DTest,testComputationPaddingValid,assert_allclose,310,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_test.py,Conv3DTest,testComputationPaddingSame,assert_allclose,341,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_test.py,Conv3DTest,testComputationPaddingValid,assert_allclose,364,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/initializers_test.py,InitializersTest,assertDifferentInitializerValues,assert_false,38,"self.assertFalse(np.allclose(t1, t2, rtol=1e-15, atol=1e-15))"
sonnet/sonnet/src/initializers_test.py,OrthogonalInitializerTest,testShapesValues,assert_allclose,358,"self.assertAllClose(np.dot(t.T, t), np.eye(t.shape[1]), rtol=tol, atol=tol)"
sonnet/sonnet/src/initializers_test.py,OrthogonalInitializerTest,testShapesValues,assert_allclose,361,"self.assertAllClose(np.dot(t, t.T), np.eye(t.shape[0]), rtol=tol, atol=tol)"
sonnet/sonnet/src/initializers_test.py,VarianceScalingInitializerTest,testWithTFFunction,assert_allclose,514,"self.assertAllClose(expected, x)"
sonnet/sonnet/src/initializers_test.py,VarianceScalingInitializerTest,testBatchAgnostic,assert_allclose,530,"self.assertAllClose(expected, x)"
sonnet/sonnet/src/regularizers_test.py,L1Test,l1,assert_allclose,32,"self.assertAllClose(regularizer(tensors), sum((l1(regularizer.scale, self.evaluate(t)) for t in tensors)))"
sonnet/sonnet/src/regularizers_test.py,L1Test,testEmpty,assert_allclose,41,"self.assertAllClose(regularizers.L1(0.01)([]), 0.0)"
sonnet/sonnet/src/regularizers_test.py,L2Test,l2,assert_allclose,53,"self.assertAllClose(regularizer(tensors), sum((l2(regularizer.scale, self.evaluate(t)) for t in tensors)))"
sonnet/sonnet/src/regularizers_test.py,L2Test,testEmpty,assert_allclose,62,"self.assertAllClose(regularizers.L2(0.01)([]), 0.0)"
sonnet/sonnet/src/regularizers_test.py,OffDiagonalOrthogonalTest,odo,assert_allclose,76,"self.assertAllClose(regularizer(tensors), sum((odo(regularizer.scale, self.evaluate(t)) for t in tensors)), atol=atol)"
sonnet/sonnet/src/regularizers_test.py,OffDiagonalOrthogonalTest,testEmpty,assert_allclose,86,"self.assertAllClose(regularizers.OffDiagonalOrthogonal(0.01)([]), 0.0)"
sonnet/sonnet/src/mixed_precision_test.py,DummyVar,check_type,assert_true,35,self.assertTrue(self.x.dtype == dtype)
sonnet/sonnet/src/mixed_precision_test.py,DummyVar,check_type_structure,assert_true,40,self.assertTrue(y.dtype == dtype)
sonnet/sonnet/src/mixed_precision_test.py,MixedPrecisionClassTest,test_float16_mode_nested_eligible_class,assert_true,107,self.assertTrue(tree.is_nested(z))
sonnet/sonnet/src/mixed_precision_test.py,MixedPrecisionTest,fwd_func,assert_true,334,self.assertTrue(x.dtype.is_integer)
sonnet/sonnet/src/mixed_precision_test.py,MixedPrecisionTest,fwd_func,assert_true,338,self.assertTrue(x.dtype.is_integer)
sonnet/sonnet/src/mixed_precision_test.py,MixedPrecisionTest,fwd_func,assert_true,341,self.assertTrue(fwd_func(x).dtype.is_integer)
sonnet/sonnet/src/mixed_precision_test.py,MixedPrecisionTest,fwd_func,assert_true,342,self.assertTrue(fwd_func(x).dtype.is_integer)
sonnet/sonnet/src/mixed_precision_test.py,DummyCall,__call__,assert_true,372,self.assertTrue(self.y.dtype == dtype)
sonnet/sonnet/src/mixed_precision_test.py,DummyCall,__call__,assert_true,373,self.assertTrue(x.dtype == dtype)
sonnet/sonnet/src/reshape_test.py,ReshapeTest,testReverse,assert_allclose,118,"self.assertAllClose(output_r_np, input_np)"
sonnet/sonnet/src/parallel_linear_test.py,ParallelLinearTest,test_behaves_same_as_stacked_linears,assert_allclose,49,"self.assertAllClose(parallel_outputs.numpy(), stacked_outputs.numpy())"
sonnet/sonnet/src/conv_transpose_test.py,ConvTransposeTest,testGraphConv,assert_allclose,109,"self.assertAllClose(self.evaluate(y1), self.evaluate(y2), atol=0.0001)"
sonnet/sonnet/src/conv_transpose_test.py,ConvTransposeTest,testInitializerVariance,assert_less,210,"self.assertLess(rel_diff, 0.5)"
sonnet/sonnet/src/conv_transpose_test.py,Conv2DTransposeTest,testComputationPaddingSame,assert_allclose,235,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_transpose_test.py,Conv2DTransposeTest,testComputationPaddingValid,assert_allclose,258,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_transpose_test.py,Conv1DTransposeTest,testComputationPaddingSame,assert_allclose,296,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_transpose_test.py,Conv1DTransposeTest,testComputationPaddingValid,assert_allclose,318,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_transpose_test.py,Conv3DTransposeTest,testComputationPaddingSame,assert_allclose,345,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/conv_transpose_test.py,Conv3DTransposeTest,testComputationPaddingValid,assert_allclose,373,"self.assertAllClose(self.evaluate(out), expected_out)"
sonnet/sonnet/src/axis_norm_test.py,LayerNormTest,testDataFormatAgnosticVar,assert_allclose,78,"self.assertAllClose(c_last_output.numpy(), c_first_output.numpy())"
sonnet/sonnet/src/axis_norm_test.py,LayerNormTest,testDataFormatAgnosticTensor,assert_allclose,125,"self.assertAllClose(c_last_output.numpy(), c_first_output.numpy())"
sonnet/sonnet/src/axis_norm_test.py,LayerNormTest,test5DDataFormatAgnostic,assert_allclose,274,"self.assertAllClose(c_last_output.numpy(), c_first_output.numpy(), atol=1e-05, rtol=1e-05)"
sonnet/sonnet/src/axis_norm_test.py,LayerNormTest,test3DDataFormatAgnostic,assert_allclose,297,"self.assertAllClose(c_last_output.numpy(), c_first_output.numpy(), atol=1e-05, rtol=1e-05)"
sonnet/sonnet/src/custom_getter_test.py,DoctestTest,testDoctest,assert_greater,49,"self.assertGreater(num_attempted, 0, 'No doctests found.')"
sonnet/sonnet/src/group_norm_test.py,GroupNormTest,testDataFormatAgnosticVar,assert_allclose,78,"self.assertAllClose(c_last_output.numpy(), c_first_output.numpy())"
sonnet/sonnet/src/group_norm_test.py,GroupNormTest,testDataFormatAgnosticTensor,assert_allclose,121,"self.assertAllClose(c_last_output, c_first_output, rtol=1e-05)"
sonnet/sonnet/src/group_norm_test.py,GroupNormTest,test5DDataFormatAgnostic,assert_allclose,293,"self.assertAllClose(c_last_output.numpy(), c_first_output.numpy(), atol=1e-05, rtol=1e-05)"
sonnet/sonnet/src/group_norm_test.py,GroupNormTest,test3DDataFormatAgnostic,assert_allclose,313,"self.assertAllClose(c_last_output.numpy(), c_first_output.numpy(), atol=1e-05, rtol=1e-05)"
sonnet/sonnet/src/optimizers/optimizer_tests.py,OptimizerTestBase,testNoneUpdate,assert_allclose,58,"self.assertAllClose(1.0, parameters[0].numpy())"
sonnet/sonnet/src/optimizers/optimizer_tests.py,AbstractFuzzTest,assertParametersRemainClose,assert_allclose,140,"self.assertAllClose(tf_p, snt_p, atol=atol, msg=msg)"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testDense,assert_allclose,65,"self.assertAllClose([[0.999, 1.999], [2.999, 3.999]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testDense,assert_allclose,69,"self.assertAllClose([[0.998, 1.998], [2.998, 3.998]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testDense,assert_allclose,73,"self.assertAllClose([[0.997, 1.997], [2.997, 3.997]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,97,"self.assertAllClose([[0.999], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,98,"self.assertAllClose([[3.0], [3.999]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,100,"self.assertAllClose(tf_parameters[0].numpy(), parameters[0].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,101,"self.assertAllClose(tf_parameters[1].numpy(), parameters[1].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,104,"self.assertAllClose([[0.998], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,105,"self.assertAllClose([[3.0], [3.998]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,107,"self.assertAllClose(tf_parameters[0].numpy(), parameters[0].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,108,"self.assertAllClose(tf_parameters[1].numpy(), parameters[1].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,111,"self.assertAllClose([[0.997], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,112,"self.assertAllClose([[3.0], [3.997]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,114,"self.assertAllClose(tf_parameters[0].numpy(), parameters[0].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testSparse,assert_allclose,115,"self.assertAllClose(tf_parameters[1].numpy(), parameters[1].numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testVariableHyperParams,assert_allclose,123,"self.assertAllClose([[0.999, 1.999], [2.999, 3.999]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testVariableHyperParams,assert_almost_equal,126,"self.assertAlmostEqual(0.1, optimizer.learning_rate.numpy())"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testVariableHyperParams,assert_allclose,128,"self.assertAllClose([[0.899, 1.899], [2.899, 3.899]], [x.numpy() for x in parameters], rtol=0.0001)"
sonnet/sonnet/src/optimizers/adam_test.py,AdamTest,testHyperParamDTypeConversion,assert_allclose,143,"self.assertAllClose([[0.999, 1.999], [2.999, 3.999]], [x.numpy() for x in parameters], rtol=0.0001)"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testDense,assert_allclose,64,"self.assertAllClose([[0.5, 1.5], [2.7, 3.7]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testDense,assert_allclose,68,"self.assertAllClose([[-0.45, 0.55], [2.13, 3.13]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testDense,assert_allclose,72,"self.assertAllClose([[-1.805, -0.805], [1.317, 2.317]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testDenseNesterov,assert_allclose,82,"self.assertAllClose([[0.05, 1.05], [2.43, 3.43]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testDenseNesterov,assert_allclose,86,"self.assertAllClose([[-1.305, -0.305], [1.617, 2.617]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testDenseNesterov,assert_allclose,90,"self.assertAllClose([[-3.0245, -2.0245], [0.5853, 1.5853]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparse,assert_allclose,110,"self.assertAllClose([[1.0 - 3.0 * 0.1], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparse,assert_allclose,111,"self.assertAllClose([[3.0], [4.0 - 3.0 * 0.01]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparse,assert_allclose,114,"self.assertAllClose([[0.7 - 3.0 * 0.19], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparse,assert_allclose,115,"self.assertAllClose([[3.0], [3.97 - 3.0 * 0.019]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparse,assert_allclose,118,"self.assertAllClose([[0.13 - 3.0 * 0.271], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparse,assert_allclose,119,"self.assertAllClose([[3.0], [3.913 - 3.0 * 0.0271]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparseNesterov,assert_allclose,139,"self.assertAllClose([[0.43], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparseNesterov,assert_allclose,140,"self.assertAllClose([[3.0], [3.943]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparseNesterov,assert_allclose,143,"self.assertAllClose([[-0.383], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparseNesterov,assert_allclose,144,"self.assertAllClose([[3.0], [3.8617]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparseNesterov,assert_allclose,147,"self.assertAllClose([[-1.4147], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testSparseNesterov,assert_allclose,148,"self.assertAllClose([[3.0], [3.75853]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testVariableHyperParams,assert_allclose,161,"self.assertAllClose([[0.5, 1.5], [2.7, 3.7]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testVariableHyperParams,assert_almost_equal,165,"self.assertAlmostEqual(0.01, optimizer.learning_rate.numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testVariableHyperParams,assert_almost_equal,166,"self.assertAlmostEqual(0.09, optimizer.momentum.numpy())"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testVariableHyperParams,assert_allclose,168,"self.assertAllClose([[0.4455, 1.4455], [2.6673, 3.6673]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/momentum_test.py,MomentumTest,testHyperParamDTypeConversion,assert_allclose,180,"self.assertAllClose([[0.5, 1.5], [2.7, 3.7]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testDense,assert_allclose,68,"self.assertAllClose([[0.683772, 1.683772], [2.683772, 3.683772]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testDense,assert_allclose,72,"self.assertAllClose([[0.454357, 1.454357], [2.454357, 3.454357]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testDense,assert_allclose,76,"self.assertAllClose([[0.262262, 1.262262], [2.262262, 3.262262]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testDenseCentered,assert_allclose,85,"self.assertAllClose([[0.666667, 1.666667], [2.666667, 3.666667]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testDenseCentered,assert_allclose,89,"self.assertAllClose([[0.41176, 1.41176], [2.41176, 3.41176]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testDenseCentered,assert_allclose,93,"self.assertAllClose([[0.186776, 1.186776], [2.186776, 3.186776]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparse,assert_allclose,113,"self.assertAllClose([[-8.486831], [2.0]], parameters[0].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparse,assert_allclose,114,"self.assertAllClose([[3.0], [-5.486784]], parameters[1].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparse,assert_allclose,117,"self.assertAllClose([[-15.369301], [2.0]], parameters[0].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparse,assert_allclose,118,"self.assertAllClose([[3.0], [-12.369237]], parameters[1].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparse,assert_allclose,121,"self.assertAllClose([[-21.132141], [2.0]], parameters[0].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparse,assert_allclose,122,"self.assertAllClose([[3.0], [-18.132067]], parameters[1].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparseCentered,assert_allclose,141,"self.assertAllClose([[-8.999999], [2.0]], parameters[0].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparseCentered,assert_allclose,142,"self.assertAllClose([[3.0], [-5.999944]], parameters[1].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparseCentered,assert_allclose,145,"self.assertAllClose([[-16.64719], [2.0]], parameters[0].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparseCentered,assert_allclose,146,"self.assertAllClose([[3.0], [-13.647109]], parameters[1].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparseCentered,assert_allclose,149,"self.assertAllClose([[-23.396709], [2.0]], parameters[0].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testSparseCentered,assert_allclose,150,"self.assertAllClose([[3.0], [-20.39661]], parameters[1].numpy(), rtol=0.0001)"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testVariableHyperParams,assert_allclose,158,"self.assertAllClose([[0.683772, 1.683772], [2.683772, 3.683772]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testVariableHyperParams,assert_almost_equal,161,"self.assertAlmostEqual(0.01, optimizer.learning_rate.numpy())"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testVariableHyperParams,assert_allclose,163,"self.assertAllClose([[0.660831, 1.660831], [2.660831, 3.660831]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/rmsprop_test.py,RMSPropTest,testHyperParamDTypeConversion,assert_allclose,183,"self.assertAllClose([[0.683772, 1.683772], [2.683772, 3.683772]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/sgd_test.py,SGDTest,testDense,assert_allclose,34,"self.assertAllClose([[-14.0, -13.0], [-6.0, -5.0]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/sgd_test.py,SGDTest,testSparse,assert_allclose,52,"self.assertAllClose([[1.0 - 3.0 * 0.1], [2.0]], parameters[0].numpy())"
sonnet/sonnet/src/optimizers/sgd_test.py,SGDTest,testSparse,assert_allclose,53,"self.assertAllClose([[3.0], [4.0 - 3.0 * 0.01]], parameters[1].numpy())"
sonnet/sonnet/src/optimizers/sgd_test.py,SGDTest,testVariableLearningRate,assert_allclose,61,"self.assertAllClose([[-14.0, -13.0], [-6.0, -5.0]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/sgd_test.py,SGDTest,testVariableLearningRate,assert_allclose,66,"self.assertAllClose([[-24.0, -23.0], [-12.0, -11.0]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/optimizers/sgd_test.py,SGDTest,testLearningRateDTypeConversion,assert_allclose,76,"self.assertAllClose([[-14.0, -13.0], [-6.0, -5.0]], [x.numpy() for x in parameters])"
sonnet/sonnet/src/nets/vqvae_test.py,VqvaeTest,testConstruct,assert_allclose,68,"self.assertAllClose(distances, vq_output_np['distances'], atol=0.04)"
sonnet/sonnet/src/nets/vqvae_test.py,VqvaeTest,testConstruct,assert_less_equal,72,"self.assertLessEqual(num_differences_in_encodings, num_differences_allowed)"
sonnet/sonnet/src/nets/vqvae_test.py,VqvaeTest,testEmaUpdating,assert_false,137,self.assertFalse((prev_embeddings == current_embeddings).all())
sonnet/sonnet/src/nets/vqvae_test.py,VqvaeTest,testEmaUpdating,assert_true,145,self.assertTrue((current_embeddings == prev_embeddings).all())
sonnet/sonnet/src/nets/vqvae_test.py,VqvaeTest,testEmbeddingsNotTrainable,assert_false,152,self.assertFalse(model.embeddings.trainable)
sonnet/sonnet/src/nets/dnc/read_test.py,ReadTest,testValues,assert_allclose,50,"self.assertAllClose(mem.numpy()[0, indices, :], read_values.numpy()[0, ...], atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,EraseRowsTest,testValues,assert_allclose,64,"self.assertAllClose(erased_mem_np[0, indices_np, :], np.zeros((num_writes, word_size)), atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,EraseRowsTest,testValues,assert_allclose,70,"self.assertAllClose(erased_mem_np[0, excluded_indices_np, :], mem_np[0, excluded_indices_np, :], atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,EraseTest,testShape,assert_true,91,"self.assertTrue(writer.shape.as_list(), [batch_size, memory_size, word_size])"
sonnet/sonnet/src/nets/dnc/write_test.py,EraseTest,testValues,assert_allclose,117,"self.assertAllClose(erased_mem_np[0, indices, :], np.zeros((num_writes, word_size)), atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,EraseTest,testValues,assert_allclose,123,"self.assertAllClose(erased_mem_np[0, excluded_indices, :], mem_np[0, excluded_indices, :], atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,EraseAndWriteTest,testShape,assert_true,145,"self.assertTrue(writer.shape.as_list(), [batch_size, memory_size, word_size])"
sonnet/sonnet/src/nets/dnc/write_test.py,EraseAndWriteTest,testValues,assert_allclose,169,"self.assertAllClose(written_mem.numpy()[0, indices, :], write_values.numpy()[0], atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,AdditiveWriteTest,testValues,assert_allclose,211,"self.assertAllClose(written_mem.numpy()[0, indices, :], write_values_np[0] + mem_np[0, indices, :], atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,AdditiveWriteTest,testValues,assert_allclose,218,"self.assertAllClose(written_mem_copy, mem_np, atol=0.002)"
sonnet/sonnet/src/nets/dnc/write_test.py,AdditiveWriteTest,testValues,assert_allclose,220,"self.assertAllClose(not_written_mem_np, mem_np, atol=0.002)"
sonnet/sonnet/src/nets/dnc/control_test.py,FeedForwardTest,testValues,assert_allclose,74,"self.assertAllClose(output.numpy(), expected_output, atol=0.01)"
sonnet/sonnet/src/nets/dnc/control_test.py,FeedForwardTest,testValues,assert_allclose,76,"self.assertAllClose(prev_state.numpy(), next_state.numpy(), atol=0.005)"
sonnet/sonnet/src/nets/dnc/util_test.py,LinearTest,testLinearOutputOneModule,assert_allclose,126,"self.assertAllClose(expected_output, output.numpy(), atol=self.get_atol())"
sonnet/sonnet/src/nets/dnc/util_test.py,LinearTest,testLinearOutputTwoModules,assert_allclose,142,"self.assertAllClose(expected_output, output.numpy(), atol=self.get_atol())"
sonnet/sonnet/src/distribute/replicator_test.py,ReplicatorTest,test_variable_trainable_default,assert_true,92,self.assertTrue(v.trainable)
sonnet/sonnet/src/distribute/distributed_batch_norm_test.py,CrossReplicaBatchNormTest,foo,assert_allclose,78,"self.assertAllClose(out, expected_out)"
sonnet/sonnet/src/distribute/distributed_batch_norm_test.py,CrossReplicaBatchNormTest,compute,assert_allclose,116,"self.assertAllClose(out, expected_out)"
sonnet/sonnet/src/functional/optimizers_test.py,OptimizersTest,test_sgd,assert_allclose,41,"self.assertAllClose(p.numpy(), 1.0 - 0.01 * 1)"
sonnet/sonnet/src/functional/jax_test.py,JaxTest,test_jit_copies_to_device,assert_true,33,self.assertTrue(x.device.endswith('CPU:0'))
sonnet/sonnet/src/functional/jax_test.py,JaxTest,test_jit_copies_to_device,assert_true,37,"self.assertTrue(y.device, device)"
sonnet/sonnet/src/functional/jax_test.py,JaxTest,test_device_put,assert_true,49,self.assertTrue(y.device.endswith(device))
sonnet/sonnet/src/functional/jax_test.py,GradTest,test_grad,assert_allclose,58,"self.assertAllClose(g(x).numpy(), (2 * x).numpy())"
sonnet/sonnet/src/functional/jax_test.py,GradTest,test_argnums,assert_allclose,66,"self.assertAllClose(gx.numpy(), (2 * x).numpy())"
sonnet/sonnet/src/functional/jax_test.py,GradTest,test_argnums,assert_allclose,67,"self.assertAllClose(gy.numpy(), (2 * y).numpy(), rtol=0.001)"
sonnet/sonnet/src/functional/jax_test.py,GradTest,test_has_aux,assert_allclose,74,"self.assertAllClose(gx.numpy(), (2 * x).numpy())"
sonnet/sonnet/src/functional/haiku_test.py,TensorVariableTest,test_trainable,assert_true,40,self.assertTrue(v.trainable)
sonnet/sonnet/src/functional/haiku_test.py,NetworkTest,test_state_ema,assert_allclose,232,"self.assertAllClose(y.numpy(), 3.0)"
sonnet/sonnet/src/functional/haiku_test.py,NetworkTest,test_state_ema,assert_allclose,234,"self.assertAllClose(y.numpy(), 5.0)"
sonnet/sonnet/src/conformance/build_test.py,BuildTest,assertCompatible,assert_true,45,self.assertTrue(a.shape.is_compatible_with(b.shape))
sonnet/sonnet/src/conformance/keras_test.py,KerasTest,test_layer_with_model,assert_true,102,"self.assertTrue(output_shape.is_compatible_with([None, 1]))"
sonnet/sonnet/src/conformance/checkpoint_test.py,GoldenCheckpointsTest,test_save_load,assert_allclose,92,"self.assertAllClose(variable.read_value(), goldens.range_like(variable), msg=variable.name)"
sonnet/sonnet/src/conformance/checkpoint_test.py,GoldenCheckpointsTest,test_save_then_load_new_instance,assert_allclose,121,"self.assertAllClose(variable.read_value(), goldens.range_like(variable), msg=variable.name)"
sonnet/sonnet/src/conformance/checkpoint_test.py,ReplicatorCheckpointTest,forward,assert_allclose,371,"self.assertAllClose(normal.read_value(), distributed.read_value(), msg=normal.name)"
sonnet/sonnet/src/conformance/api_test.py,PublicSymbolsTest,test_src_not_exported,assert_false,27,"self.assertFalse(hasattr(snt, 'src'))"
sonnet/sonnet/src/conformance/api_test.py,PublicSymbolsTest,test_supports_reload,assert_false,33,"self.assertFalse(hasattr(mysnt, 'src'))"
